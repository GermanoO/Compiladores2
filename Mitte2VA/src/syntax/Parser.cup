package syntax;

import java_cup.runtime.*;
import java.util.*;
import arvore.*;
import arvore.expressao.*;
import arvore.comando.*;
import java.util.List;


action code {:
    //cria um atributo para guardar os valores das variáveis
    private List<Expressao> listaExprs = new ArrayList<Expressao>();

:}

/*****  Terminais (tokens) *****/

terminal String IDENTIFICADOR;
    
terminal Object    OP_IGUAL;
terminal Object    OP_DIFERENTE;
terminal Object    OP_MAIOR_QUE;
terminal Object    OP_MENOR_QUE;
terminal Object    OP_MAIOR_OU_IGUAL;
terminal Object    OP_MENOR_OU_IGUAL;
    
terminal Object    SOMA;
terminal Object    SUB;
terminal Object    MULT;
terminal Object    DIV;
terminal Object    RESTO;
terminal Object    AND;
terminal Object    OR;
terminal Object    NOT;
    
terminal Object    ATRIBUICAO;
    
terminal Object    ABRE_PAR;
terminal Object    FECHA_PAR;
terminal Object    ABRE_CHAVE;
terminal Object    FECHA_CHAVE;
terminal Object    VIRGULA;
terminal Object    PONTO_VIRGULA;
terminal Object    DOIS_PONTOS;
    
terminal String    INT_LITERAL;
terminal String    FLOAT_LITERAL;
terminal String    CHAR_LITERAL;
terminal String    STRING_LITERAL;
    
terminal Object    KEY_IF;
terminal Object    KEY_ELSE;
terminal Object    KEY_WHILE;
terminal Object    KEY_RETURN;
terminal Object    KEY_INT;
terminal Object    KEY_FLOAT;
terminal Object    KEY_CHAR;
terminal Object    KEY_STRING;
terminal Object    KEY_CALL;
terminal Object    KEY_DEF;
terminal Object    KEY_PRINT;


/***** Nao-terminais *****/

non terminal 		program;
non terminal 		decl_global;
non terminal 		decl_variavel;
non terminal 		lista_idents;
non terminal 		resto_lista_idents;
non terminal 		tipo;
non terminal 		decl_funcao;
non terminal 		assinatura;
non terminal 		param_formais;
non terminal 		resto_param_formais;
non terminal 		bloco;
non terminal 		lista_comandos;
non terminal Comando comando;
non terminal 		atribuicao;
non terminal Iteracao		iteracao;
non terminal Decisao decisao;
non terminal 		escrita;
non terminal 		chamada_func_cmd;
non terminal 		retorno;
non terminal ChamadaFunc	chamada_func;
non terminal		lista_exprs;
non terminal 		resto_lista_exprs;
non terminal Expressao expressao;
non terminal Expressao expr_basica;



/***** Precedencia e associatividade *****/

precedence left OR, AND; //simbolos de menor precedencia
precedence left OP_IGUAL, OP_DIFERENTE, OP_MAIOR_QUE, OP_MENOR_QUE, OP_MAIOR_OU_IGUAL, OP_MENOR_OU_IGUAL;
precedence left SOMA, SUB;     
precedence left MULT, DIV, RESTO;   
precedence left NOT;     //simbolo de maior precedencia

/***** A gramática *****/

program ::= program decl_global 
          | /*vazio*/ 
          ;

decl_global ::= decl_variavel
            | decl_funcao
            ;
            
decl_variavel ::= lista_idents DOIS_PONTOS tipo PONTO_VIRGULA
               ;
               
lista_idents ::= IDENTIFICADOR resto_lista_idents  
             ;

resto_lista_idents ::=  VIRGULA IDENTIFICADOR resto_lista_idents
                     |  /* vazio */
                     ;

tipo ::= KEY_INT | KEY_CHAR | KEY_FLOAT | KEY_STRING ;

decl_funcao ::= assinatura bloco;

assinatura ::= KEY_DEF IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR DOIS_PONTOS tipo
             | KEY_DEF IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR
             ;

param_formais ::= IDENTIFICADOR DOIS_PONTOS tipo resto_param_formais 
                | /*vazio*/ 
                ;
                  
resto_param_formais ::= VIRGULA IDENTIFICADOR DOIS_PONTOS tipo resto_param_formais
                      | /*vazio*/
                      ; 

bloco ::= ABRE_CHAVE lista_comandos FECHA_CHAVE ;

lista_comandos ::= lista_comandos comando
				| /*vazio*/
                 ;

comando  ::= decl_variavel
           | atribuicao
           | iteracao:i
           {:	RESULT = i;	:}          
           | decisao:d 
             {: RESULT = d; :}
           | escrita
           | retorno
           | bloco
           | chamada_func_cmd
           ;

atribuicao ::= lista_idents ATRIBUICAO expressao PONTO_VIRGULA ;

iteracao ::= KEY_WHILE ABRE_PAR expressao:exp FECHA_PAR comando:cmdwhile 
			{:	RESULT = new Iteracao(exp, cmdwhile);	:}
			;

decisao ::= KEY_IF ABRE_PAR expressao:exp FECHA_PAR comando:cmdif KEY_ELSE comando:cmdelse
			{: RESULT = new Decisao(exp, cmdif, cmdelse);  :}

            | KEY_IF ABRE_PAR expressao:exp FECHA_PAR comando:cmd
            {: RESULT = new Decisao(exp, cmd);  :}
            
            ;

escrita ::= KEY_PRINT ABRE_PAR expressao:exp FECHA_PAR PONTO_VIRGULA 
			{:	RESULT = new Escrita(exp);	:}
			;
			
chamada_func_cmd ::= KEY_CALL chamada_func:chamadaFunc PONTO_VIRGULA 
					{:	RESULT = new ChamadaFuncCmd(chamadaFunc);	:}
			;
			
retorno ::= KEY_RETURN expressao:exp PONTO_VIRGULA 
			{:	RESULT = new Retorno(exp);	:}
			;

chamada_func ::= IDENTIFICADOR:nomeFunc ABRE_PAR lista_exprs FECHA_PAR 
				{:	RESULT = new ChamadaFunc(nomeFunc,listaExprs);	:}
				;
				

lista_exprs ::= expressao:exp resto_lista_exprs
				{:	RESULT = listaExprs.add(exp);	:}

              | /*vazio*/
              ; 

resto_lista_exprs ::= resto_lista_exprs VIRGULA expressao:exp
					{:	RESULT = listaExprs.add(exp);	:}
                    | /*vazio*/
                    ;

expressao ::= expressao:esq SOMA expressao:dir
        {:	RESULT = new ExpAritmetica(esq, dir, "+");	:}
        
        | expressao:esq SUB expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "-");  :}
        
        | expressao:esq MULT expressao:dir
        {:	RESULT = new ExpAritmetica(esq, dir, "*");	:}
        
        | expressao:esq DIV expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "/");  :}
        
        | expressao:esq RESTO expressao:dir
        {: RESULT = new ExpAritmetica(esq, dir, "%");  :}
        
        | expressao:esq AND expressao:dir
        {:	RESULT = new ExpLogica(esq, dir, "&&");	:}
        
        | expressao:esq OR expressao:dir
        {:	RESULT = new ExpLogica(esq, dir, "||");	:}
        
        | expressao:esq OP_IGUAL expressao:dir
        {:	RESULT = new ExprRelacional(esq, dir, "=");	:}
        
        | expressao:esq OP_DIFERENTE expressao:dir
        {:	RESULT = new ExprRelacional(esq, dir, "!=");	:}
        
        | expressao:esq OP_MENOR_QUE expressao:dir
        {:	RESULT = new ExprRelacional(esq, dir, "<");	:}
        
        | expressao:esq OP_MENOR_OU_IGUAL expressao:dir
        {:	RESULT = new ExprRelacional(esq, dir, ">");	:}
        
        | expressao:esq OP_MAIOR_OU_IGUAL expressao:dir
        {:	RESULT = new ExprRelacional(esq, dir, ">=");	:}
        
        | expressao:esq OP_MAIOR_QUE expressao:dir
        {:	RESULT = new ExprRelacional(esq, dir, "<=");	:}
        
        | expr_basica:exp
        {:  RESULT = exp;  :}
        ;

expr_basica ::= ABRE_PAR expressao:exp FECHA_PAR 
         		{:  RESULT = exp;  :}
         
         | NOT expr_basica:expb
         {:	RESULT = new ExpUnaria("!",expb);	:}
         
         | SUB expr_basica:expb
         {:	RESULT = new ExpUnaria("-",expb);	:}
         
         | INT_LITERAL:lex
         {:  int valor = Integer.parseInt(lex); 
             RESULT = new IntLiteral(valor);    :}
         
         | CHAR_LITERAL:lex
         {: char ch = lex.charAt(0);
         RESULT = new CharLiteral(ch);	:}
         
         | FLOAT_LITERAL:lex
         {:	float valor = Float.parseFloat(lex);
         RESULT = new FloatLiteral(valor);	:}
         
         | STRING_LITERAL:lex
         {: RESULT = new StringLiteral(lex);   :}
         
         | IDENTIFICADOR:ident
         {:	RESULT = new ExprIdentificador(ident);	:}
         
         | chamada_func
         
         ;

